name: Trading Bot CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run health check daily at 8 AM IST (2:30 AM UTC)
    - cron: '30 2 * * *'
    
    # Pre-market analysis (7:00 AM IST = 1:30 AM UTC)
    - cron: '30 1 * * 1-5'
    
    # Market hours - every 15 minutes during trading (9:15 AM - 3:30 PM IST)
    # 9:15 AM IST = 3:45 AM UTC, 3:30 PM IST = 10:00 AM UTC
    - cron: '45,0,15,30 3-9 * * 1-5'
    - cron: '45,0 10 * * 1-5'
    
    # Post-market analysis (4:00 PM IST = 10:30 AM UTC)
    - cron: '30 10 * * 1-5'
    
    # Daily report (5:00 PM IST = 11:30 AM UTC)  
    - cron: '30 11 * * 1-5'

env:
  PYTHON_VERSION: '3.9'
  TRADING_CAPITAL: ${{ secrets.TRADING_CAPITAL }}
  MAX_DAILY_LOSS_PERCENT: ${{ secrets.MAX_DAILY_LOSS_PERCENT }}
  ENABLE_PAPER_TRADING: ${{ secrets.ENABLE_PAPER_TRADING }}

jobs:
  # Test and validation job
  test:
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov bandit black pylint flake8 mypy
    
    - name: Run security checks
      run: |
        bandit -r src/ -f json -o security-report.json || true
        echo "Security scan completed"
    
    - name: Run linting
      run: |
        echo "Running code quality checks..."
        black src/ --check --diff || true
        pylint src/ --exit-zero --output-format=colorized
        flake8 src/ --exit-zero
    
    - name: Run type checking
      run: |
        mypy src/ --ignore-missing-imports --no-error-summary || true
    
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
      continue-on-error: true
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Trading execution job (only on schedule)
  trading-execution:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python  
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Determine trading action
      id: trading-action
      run: |
        HOUR=$(TZ=Asia/Kolkata date +%H)
        DAY=$(TZ=Asia/Kolkata date +%u)  # 1=Monday, 7=Sunday
        
        # Only trade on weekdays
        if [ $DAY -gt 5 ]; then
          echo "ACTION=weekend" >> $GITHUB_OUTPUT
          echo "Weekend - no trading"
          exit 0
        fi
        
        if [ $HOUR -eq 7 ]; then
          echo "ACTION=pre_market" >> $GITHUB_OUTPUT
        elif [ $HOUR -ge 9 ] && [ $HOUR -lt 16 ]; then
          echo "ACTION=trading" >> $GITHUB_OUTPUT  
        elif [ $HOUR -eq 16 ]; then
          echo "ACTION=post_market" >> $GITHUB_OUTPUT
        elif [ $HOUR -eq 17 ]; then
          echo "ACTION=daily_report" >> $GITHUB_OUTPUT
        else
          echo "ACTION=health_check" >> $GITHUB_OUTPUT
        fi
        
        echo "Current IST time: $(TZ=Asia/Kolkata date)"
        echo "Action determined: ${{ env.ACTION }}"
    
    - name: Validate configuration
      env:
        KITE_API_KEY: ${{ secrets.KITE_API_KEY }}
        KITE_API_SECRET: ${{ secrets.KITE_API_SECRET }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_USER_ID: ${{ secrets.TELEGRAM_USER_ID }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        echo "Validating configuration..."
        python main.py --validate-config
    
    - name: Execute pre-market analysis
      if: steps.trading-action.outputs.ACTION == 'pre_market'
      env:
        KITE_API_KEY: ${{ secrets.KITE_API_KEY }}
        KITE_API_SECRET: ${{ secrets.KITE_API_SECRET }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_USER_ID: ${{ secrets.TELEGRAM_USER_ID }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      run: |
        echo "üåÖ Running pre-market analysis..."
        python -c "
        import asyncio
        from src.intelligence.multi_timeframe import MultiTimeframeAnalyzer
        from src.integrations.telegram_bot import send_notification
        
        async def pre_market():
            analyzer = MultiTimeframeAnalyzer()
            analysis = await analyzer.analyze_pre_market()
            await send_notification('üìä Pre-market Analysis Complete')
            print('Pre-market analysis completed')
        
        asyncio.run(pre_market())
        "
    
    - name: Execute trading cycle
      if: steps.trading-action.outputs.ACTION == 'trading'
      env:
        KITE_API_KEY: ${{ secrets.KITE_API_KEY }}
        KITE_API_SECRET: ${{ secrets.KITE_API_SECRET }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_USER_ID: ${{ secrets.TELEGRAM_USER_ID }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      run: |
        echo "üìà Executing trading cycle..."
        python main.py --paper-trading
        echo "Trading cycle completed"
    
    - name: Execute post-market analysis
      if: steps.trading-action.outputs.ACTION == 'post_market'
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_USER_ID: ${{ secrets.TELEGRAM_USER_ID }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      run: |
        echo "üåÜ Running post-market analysis..."
        python -c "
        import asyncio
        from src.integrations.telegram_bot import send_notification
        
        async def post_market():
            await send_notification('üìä Post-market Analysis Complete')
            print('Post-market analysis completed')
        
        asyncio.run(post_market())
        "
    
    - name: Generate daily report
      if: steps.trading-action.outputs.ACTION == 'daily_report'
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_USER_ID: ${{ secrets.TELEGRAM_USER_ID }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      run: |
        echo "üìã Generating daily report..."
        python scripts/generate_report.py --daily
        echo "Daily report completed"
    
    - name: Health check
      if: steps.trading-action.outputs.ACTION == 'health_check'
      env:
        KITE_API_KEY: ${{ secrets.KITE_API_KEY }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      run: |
        echo "üè• Running health check..."
        python scripts/health_check.py
        echo "Health check completed"
    
    - name: Handle errors and notifications
      if: failure()
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_USER_ID: ${{ secrets.TELEGRAM_USER_ID }}
      run: |
        echo "‚ùå Trading bot execution failed"
        python -c "
        import asyncio
        from src.integrations.telegram_bot import send_error_notification
        
        async def error_notification():
            await send_error_notification('üö® GitHub Actions execution failed!')
        
        asyncio.run(error_notification())
        "

  # Deployment job (only on main branch push)
  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Set up Node.js for Serverless
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install Serverless Framework
      run: |
        npm install -g serverless@3
        npm install serverless-python-requirements@latest --legacy-peer-deps
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Verify Serverless Installation
      run: |
        echo "Checking Serverless Framework version..."
        serverless --version
        npm list -g serverless
        
    - name: Handle DELETE_FAILED stack
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ap-south-1
      run: |
        echo "üö® Handling DELETE_FAILED CloudFormation stack..."
        
        # Check stack status
        STACK_STATUS=$(aws cloudformation describe-stacks --stack-name nifty-banknifty-trading-bot-dev --region ap-south-1 --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "DOES_NOT_EXIST")
        echo "Current stack status: $STACK_STATUS"
        
        if [ "$STACK_STATUS" = "DELETE_FAILED" ]; then
          echo "Stack is in DELETE_FAILED state, performing manual cleanup..."
          
          # Step 1: Empty and delete S3 buckets manually
          echo "üóÇÔ∏è Cleaning up S3 buckets..."
          aws s3api list-buckets --query 'Buckets[?contains(Name, `nifty-banknifty-trading-bot-dev`)].Name' --output text 2>/dev/null | tr '\t' '\n' | while read bucket; do
            if [ ! -z "$bucket" ]; then
              echo "Processing bucket: $bucket"
              aws s3 rm s3://$bucket --recursive --region ap-south-1 2>/dev/null || echo "Bucket $bucket not accessible"
              aws s3api delete-bucket --bucket "$bucket" --region ap-south-1 2>/dev/null || echo "Could not delete bucket $bucket"
            fi
          done
          
          # Step 2: Delete Lambda functions manually
          echo "‚ö° Deleting Lambda functions..."
          for func in mainTrading preMarketAnalysis postMarketReporting youtubeAnalysis healthCheck; do
            FULL_NAME="nifty-banknifty-trading-bot-dev-$func"
            aws lambda delete-function --function-name "$FULL_NAME" --region ap-south-1 2>/dev/null || echo "Function $FULL_NAME not found"
          done
          
          # Step 3: Delete log groups manually
          echo "üìã Deleting log groups..."
          aws logs describe-log-groups --log-group-name-prefix "/aws/lambda/nifty-banknifty-trading-bot-dev" --region ap-south-1 --query 'logGroups[*].logGroupName' --output text 2>/dev/null | tr '\t' '\n' | while read log_group; do
            if [ ! -z "$log_group" ]; then
              echo "Deleting log group: $log_group"
              aws logs delete-log-group --log-group-name "$log_group" --region ap-south-1 2>/dev/null || echo "Log group already deleted"
            fi
          done
          
          # Step 4: Delete IAM role manually
          echo "üîê Deleting IAM resources..."
          ROLE_NAME="nifty-banknifty-trading-bot-dev-ap-south-1-lambdaRole"
          # Detach policies first
          aws iam list-attached-role-policies --role-name "$ROLE_NAME" --query 'AttachedPolicies[*].PolicyArn' --output text 2>/dev/null | tr '\t' '\n' | while read policy; do
            if [ ! -z "$policy" ]; then
              aws iam detach-role-policy --role-name "$ROLE_NAME" --policy-arn "$policy" 2>/dev/null || echo "Policy $policy already detached"
            fi
          done
          # Delete inline policies
          aws iam list-role-policies --role-name "$ROLE_NAME" --query 'PolicyNames' --output text 2>/dev/null | tr '\t' '\n' | while read policy; do
            if [ ! -z "$policy" ]; then
              aws iam delete-role-policy --role-name "$ROLE_NAME" --policy-name "$policy" 2>/dev/null || echo "Inline policy $policy already deleted"
            fi
          done
          # Delete the role
          aws iam delete-role --role-name "$ROLE_NAME" 2>/dev/null || echo "Role $ROLE_NAME not found"
          
          # Step 5: Delete CloudWatch alarms
          echo "‚è∞ Deleting CloudWatch alarms..."
          aws cloudwatch describe-alarms --alarm-name-prefix "nifty-banknifty-trading-bot-dev" --region ap-south-1 --query 'MetricAlarms[*].AlarmName' --output text 2>/dev/null | tr '\t' '\n' | while read alarm; do
            if [ ! -z "$alarm" ]; then
              aws cloudwatch delete-alarms --alarm-names "$alarm" --region ap-south-1 2>/dev/null || echo "Alarm $alarm already deleted"
            fi
          done
          
          # Step 6: Delete SQS queues
          echo "üì® Deleting SQS queues..."
          aws sqs list-queues --queue-name-prefix "nifty-banknifty-trading-bot-dev" --region ap-south-1 --query 'QueueUrls' --output text 2>/dev/null | tr '\t' '\n' | while read queue_url; do
            if [ ! -z "$queue_url" ]; then
              aws sqs delete-queue --queue-url "$queue_url" --region ap-south-1 2>/dev/null || echo "Queue already deleted"
            fi
          done
          
          # Step 7: Force delete the stack after manual cleanup
          echo "üóëÔ∏è Force deleting CloudFormation stack..."
          aws cloudformation delete-stack --stack-name nifty-banknifty-trading-bot-dev --region ap-south-1 2>/dev/null || echo "Stack deletion command sent"
          
          # Step 8: Wait briefly then check if we need to continue
          sleep 60
          NEW_STATUS=$(aws cloudformation describe-stacks --stack-name nifty-banknifty-trading-bot-dev --region ap-south-1 --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "DELETED")
          echo "Stack status after cleanup: $NEW_STATUS"
          
        elif [ "$STACK_STATUS" = "DOES_NOT_EXIST" ]; then
          echo "‚úÖ No stack found, ready for fresh deployment"
        else
          echo "Stack status: $STACK_STATUS - attempting normal cleanup..."
          serverless remove --stage dev --verbose --force || echo "Normal removal failed, continuing with deployment"
        fi
        
        echo "‚úÖ Cleanup completed, proceeding with fresh deployment"
        
    - name: Deploy to Lambda
      env:
        KITE_API_KEY: ${{ secrets.KITE_API_KEY }}
        KITE_API_SECRET: ${{ secrets.KITE_API_SECRET }}
        KITE_ACCESS_TOKEN: ${{ secrets.KITE_ACCESS_TOKEN }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_USER_ID: ${{ secrets.TELEGRAM_USER_ID }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        ENABLE_PAPER_TRADING: ${{ secrets.ENABLE_PAPER_TRADING }}
      run: |
        echo "üöÄ Deploying to AWS Lambda..."
        echo "Current directory: $(pwd)"
        echo "Serverless config file exists: $(ls -la serverless.yml)"
        serverless deploy --stage dev --verbose --force
    
    - name: Update Railway deployment
      run: |
        echo "üöÇ Updating Railway deployment..."
        echo "Railway auto-deploys from GitHub on push"
        # Railway handles deployment automatically
    
    - name: Deployment success notification
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_USER_ID: ${{ secrets.TELEGRAM_USER_ID }}
      run: |
        python -c "
        import asyncio
        from src.integrations.telegram_bot import send_notification
        
        async def deploy_success():
            await send_notification('üöÄ Trading bot deployed successfully!')
        
        asyncio.run(deploy_success())
        "

  # Security monitoring
  security:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run security audit
      run: |
        echo "üîí Running security audit..."
        # Check for secrets in code
        git log --oneline -n 50 | grep -i -E "(password|secret|key|token)" || true
        echo "Security audit completed"
    
    - name: Check dependencies for vulnerabilities
      run: |
        pip install safety
        safety check --json || true

# Workflow configuration
concurrency:
  group: trading-bot-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel trading operations